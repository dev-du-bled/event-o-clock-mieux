generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ContactStatus {
  pending
  sent
  error
}

enum Role {
  user
  admin
}

enum EventStatus {
  draft
  published
}

enum BookingStatus {
  pending
  confirmed
  cancelled
  past
}

enum TicketType {
  child
  admin
  student
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  name          String
  role          Role       @default(user)
  emailVerified Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Event         Event[]
  Favorite      Favorite[]
  Booking       Booking[]
  sessions      Session[]
  accounts      Account[]
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  image         String?

  @@map("user")
}

model ContactMessage {
  id        String        @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime      @default(now())
  status    ContactStatus @default(pending)
}

model Event {
  id                 String      @id @default(uuid())
  title              String
  startDate          DateTime
  startTime          DateTime
  endDate            DateTime
  endTime            DateTime
  address            String
  streetNumber       String
  street             String
  city               String
  postalCode         String
  description        String
  images             String[]
  categories         String[]
  isPaid             Boolean     @default(false)
  price              Float       @default(0)
  organizerWebsite   String?
  organizerPhone     String?
  createdBy          String
  status             EventStatus @default(draft)
  isRecurring        Boolean     @default(false)
  recurringDays      String[]
  recurringEndDate   String?
  isAccessible       Boolean     @default(false)
  hasParking         Boolean     @default(false)
  hasPublicTransport Boolean     @default(false)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  user      User       @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  favorites Favorite[]
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

model CinemaRoom {
  id           String @id @default(uuid())
  name         String
  capacity     Int
  currentMovie Json? // Storing movie ID and showtime as JSON

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  seats Seat[]
}

model Booking {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  movieId     Int
  totalAmount Float
  createdAt   DateTime      @default(now())
  status      BookingStatus @default(pending)

  seats Seat[]
}

model Seat {
  id        String @id @default(uuid())
  seatLabel String

  // relations
  room   CinemaRoom @relation(fields: [roomId], references: [id])
  roomId String

  booking   Booking? @relation(fields: [bookingId], references: [id])
  bookingId String?
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

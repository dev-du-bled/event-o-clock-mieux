generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ContactStatus {
  PENDING
  SENT
  ERROR
}

enum Role {
  user
  organizer
  admin
}

enum EventStatus {
  DRAFT
  PUBLISHED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum TicketType {
  CHILD
  ADULT
  STUDENT
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  name          String
  role          Role       @default(user)
  emailVerified Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Event         Event[]
  Favorite      Favorite[]
  Booking       Booking[]
  sessions      Session[]
  accounts      Account[]
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  image         String?
  Cart          Cart?

  @@map("user")
}

model ContactMessage {
  id        String        @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime      @default(now())
  status    ContactStatus @default(PENDING)
}

model Event {
  id                 String      @id @default(uuid())
  title              String
  startDate          String
  startTime          String
  endDate            String
  endTime            String
  map                Json        @default("{}")
  place              String
  address            String
  city               String
  postalCode         String
  description        String
  images             String[]
  categories         String[]
  isPaid             Boolean     @default(false)
  prices             Json[]      @default([]) // [{type: "cat1", price: 25.99}, {type: "cat2", price: 15.50}]
  organizerWebsite   String
  organizerPhone     String
  createdBy          String
  status             EventStatus @default(DRAFT)
  isRecurring        Boolean     @default(false)
  recurringDays      String[]
  recurringEndDate   String?
  isAccessible       Boolean     @default(false)
  hasParking         Boolean     @default(false)
  hasPublicTransport Boolean     @default(false)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  user      User       @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  favorites Favorite[]
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

model CinemaRoom {
  id           String   @id @default(uuid())
  name         String
  capacity     Int
  currentMovie Json     @default("{}")
  seats        Seat[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  bookings Booking[]
}

model Seat {
  id          String  @id @default(uuid())
  row         String
  number      Int
  isAvailable Boolean @default(true)
  roomId      String // Foreign key to CinemaRoom

  // Relations
  room         CinemaRoom    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  bookingSeats BookingSeat[]

  // Ensure seat numbers are unique within a room
  @@unique([roomId, row, number])
}

model Booking {
  id          String        @id @default(uuid())
  userId      String
  roomId      String
  movieId     Int
  totalAmount Float
  createdAt   DateTime      @default(now())
  status      BookingStatus @default(PENDING)

  // Relations
  user  User          @relation(fields: [userId], references: [id])
  room  CinemaRoom    @relation(fields: [roomId], references: [id])
  seats BookingSeat[]
}

model Cart {
  id          String   @id @default(uuid())
  userId      String
  items       Json[]   @default([])
  totalAmount Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model BookingSeat {
  id         String     @id @default(uuid())
  bookingId  String
  seatId     String
  ticketType TicketType
  price      Float

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  seat    Seat    @relation(fields: [seatId], references: [id])

  // Each seat can only be booked once per booking
  @@unique([bookingId, seatId])
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
